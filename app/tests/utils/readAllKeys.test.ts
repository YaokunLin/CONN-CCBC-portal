import readAllKeys from 'utils/readAllKeys';
import schema from 'formSchema/schema';

const schemaSection = schema.properties.otherFundingSources;

describe('The readAllKeys function', () => {
  it('returns all keys from a nested object', () => {
    expect(readAllKeys(schemaSection)).toStrictEqual([
      'title',
      'type',
      'description',
      'required',
      'properties',
      'dependencies',
      'infrastructureBankFunding2223',
      'infrastructureBankFunding2324',
      'infrastructureBankFunding2425',
      'infrastructureBankFunding2526',
      'totalInfrastructureBankFunding',
      'otherFundingSources',
      'title',
      'type',
      'title',
      'type',
      'title',
      'type',
      'title',
      'type',
      'title',
      'type',
      'readOnly',
      'title',
      'type',
      'enum',
      'otherFundingSources',
      'oneOf',
      'properties',
      'otherFundingSources',
      'enum',
      'properties',
      'otherFundingSources',
      'otherFundingSourcesArray',
      'enum',
      'type',
      'default',
      'items',
      'type',
      'required',
      'properties',
      'fundingPartnersName',
      'fundingSourceContactInfo',
      'statusOfFunding',
      'funderType',
      'nameOfFundingProgram',
      'requestedFundingPartner2223',
      'requestedFundingPartner2324',
      'requestedFundingPartner2425',
      'requestedFundingPartner2526',
      'requestedFundingPartner2627',
      'totalRequestedFundingPartner',
      'title',
      'type',
      'title',
      'type',
      'title',
      'type',
      'enum',
      'title',
      'type',
      'enum',
      'title',
      'type',
      'title',
      'type',
      'title',
      'type',
      'title',
      'type',
      'title',
      'type',
      'title',
      'type',
      'title',
      'type',
      'readOnly',
    ]);
  });

  it('handles an empty object', () => {
    expect(readAllKeys({})).toStrictEqual([]);
  });
});

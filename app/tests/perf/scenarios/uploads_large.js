/* eslint-disable */
import http from 'k6/http';
import exec from 'k6/execution';
import { FormData } from 'https://jslib.k6.io/formdata/0.0.2/index.js';

/*
    Upload test files generated by running make generate_perf_files` in project root
    or using command:
          head -c [file size] </dev/urandom >[file name]

          example:
          head -c 100000 </dev/urandom >file_1M.bin
 */

const file10M = open('../../../../k6files/file_10M.bin', 'b');
const file50M = open('../../../../k6files/file_50M.bin', 'b');
const file100M = open('../../../../k6files/file_100M.bin', 'b');

const createAttachmentPayload = JSON.stringify({
  id: 'createAttachmentMutation',
  query: `
      mutation createAttachmentMutation($input: CreateAttachmentInput!) {
        createAttachment(input: $input) {
          attachment {
            rowId
            file
          }
        }
      }`,
  variables: {
    input: {
      attachment: {
        file: null,
        fileName: 'file.bin',
        fileSize: '100MB',
        fileType: 'test',
        applicationId: 1,
      },
    },
  },
});

const createFormData = (file) => {
  const fd = new FormData();
  fd.append('operations', createAttachmentPayload);

  fd.append('map', '{"nfile":["variables.input.attachment.file"]}');
  fd.append('nfile', file);

  return fd;
};

const createPostParams = (formDataBoundary) => {
  const postParams = {
    cookies: {
      'mocks.auth_role': 'ccbc_auth_user',
      'mocks.mocked_timestamp': 1660924800,
    },
    headers: {
      'Content-Type': `multipart/form-data; boundary=${formDataBoundary}`,
    },
  };

  return postParams;
};

const fd_10MB = createFormData(http.file(file10M, 'file_10M.bin'));
const fd_50MB = createFormData(http.file(file50M, 'file_50M.bin'));
const fd_100MB = createFormData(http.file(file100M, 'file_100M.bin'));

const uploads = () => {
  http.post(
    __ENV.APP_HOST + '/graphql',
    fd_10MB.body(),
    Object.assign({}, createPostParams(fd_10MB.boundary), {
      tags: { name: 'createAttachmentMutation' },
    })
  );

  http.post(
    __ENV.APP_HOST + '/graphql',
    fd_50MB.body(),
    Object.assign({}, createPostParams(fd_50MB.boundary), {
      tags: { name: 'createAttachmentMutation' },
    })
  );

  http.post(
    __ENV.APP_HOST + '/graphql',
    fd_100MB.body(),
    Object.assign({}, createPostParams(fd_100MB.boundary), {
      tags: { name: 'createAttachmentMutation' },
    })
  );
};

export default uploads;

diff --git a/node_modules/react-relay-network-modern/es/middlewares/upload.js b/node_modules/react-relay-network-modern/es/middlewares/upload.js
index 980db20..80a12d4 100644
--- a/node_modules/react-relay-network-modern/es/middlewares/upload.js
+++ b/node_modules/react-relay-network-modern/es/middlewares/upload.js
@@ -1,26 +1,23 @@
 import { extractFiles } from 'extract-files';
 import RelayRequestBatch from '../RelayRequestBatch';
 export default function uploadMiddleware() {
-  return next => async req => {
+  return (next) => async (req) => {
     if (req instanceof RelayRequestBatch) {
       throw new Error('RelayRequestBatch is not supported');
     }

     const operations = {
-      query: req.operation.text,
-      variables: req.variables
+      id: req.operation.id,
+      variables: req.variables,
     };
-    const {
-      clone: extractedOperations,
-      files
-    } = extractFiles(operations);
+    const { clone: extractedOperations, files } = extractFiles(operations);

     if (files.size) {
       const formData = new FormData();
       formData.append('operations', JSON.stringify(extractedOperations));
       const pathMap = {};
       let i = 0;
-      files.forEach(paths => {
+      files.forEach((paths) => {
         pathMap[++i] = paths;
       });
       formData.append('map', JSON.stringify(pathMap));
diff --git a/node_modules/react-relay-network-modern/lib/middlewares/upload.js b/node_modules/react-relay-network-modern/lib/middlewares/upload.js
index e2e9388..afd43f7 100644
--- a/node_modules/react-relay-network-modern/lib/middlewares/upload.js
+++ b/node_modules/react-relay-network-modern/lib/middlewares/upload.js
@@ -1,80 +1,128 @@
-"use strict";
+'use strict';

-Object.defineProperty(exports, "__esModule", {
-  value: true
+Object.defineProperty(exports, '__esModule', {
+  value: true,
 });
-exports["default"] = uploadMiddleware;
+exports['default'] = uploadMiddleware;

-var _extractFiles2 = require("extract-files");
+var _extractFiles2 = require('extract-files');

-var _RelayRequestBatch = _interopRequireDefault(require("../RelayRequestBatch"));
+var _RelayRequestBatch = _interopRequireDefault(
+  require('../RelayRequestBatch')
+);

-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
+function _interopRequireDefault(obj) {
+  return obj && obj.__esModule ? obj : { default: obj };
+}

-function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
+function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
+  try {
+    var info = gen[key](arg);
+    var value = info.value;
+  } catch (error) {
+    reject(error);
+    return;
+  }
+  if (info.done) {
+    resolve(value);
+  } else {
+    Promise.resolve(value).then(_next, _throw);
+  }
+}

-function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
+function _asyncToGenerator(fn) {
+  return function () {
+    var self = this,
+      args = arguments;
+    return new Promise(function (resolve, reject) {
+      var gen = fn.apply(self, args);
+      function _next(value) {
+        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
+      }
+      function _throw(err) {
+        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
+      }
+      _next(undefined);
+    });
+  };
+}

 function uploadMiddleware() {
   return function (next) {
-    return /*#__PURE__*/function () {
-      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req) {
-        var operations, _extractFiles, extractedOperations, files, formData, pathMap, i, res;
+    return /*#__PURE__*/ (function () {
+      var _ref = _asyncToGenerator(
+        /*#__PURE__*/ regeneratorRuntime.mark(function _callee(req) {
+          var operations,
+            _extractFiles,
+            extractedOperations,
+            files,
+            formData,
+            pathMap,
+            i,
+            res;

-        return regeneratorRuntime.wrap(function _callee$(_context) {
-          while (1) {
-            switch (_context.prev = _context.next) {
-              case 0:
-                if (!(req instanceof _RelayRequestBatch["default"])) {
-                  _context.next = 2;
-                  break;
-                }
+          return regeneratorRuntime.wrap(function _callee$(_context) {
+            while (1) {
+              switch ((_context.prev = _context.next)) {
+                case 0:
+                  if (!(req instanceof _RelayRequestBatch['default'])) {
+                    _context.next = 2;
+                    break;
+                  }

-                throw new Error('RelayRequestBatch is not supported');
+                  throw new Error('RelayRequestBatch is not supported');

-              case 2:
-                operations = {
-                  query: req.operation.text,
-                  variables: req.variables
-                };
-                _extractFiles = (0, _extractFiles2.extractFiles)(operations), extractedOperations = _extractFiles.clone, files = _extractFiles.files;
+                case 2:
+                  operations = {
+                    id: req.operation.id,
+                    variables: req.variables,
+                  };
+                  (_extractFiles = (0, _extractFiles2.extractFiles)(
+                    operations
+                  )),
+                    (extractedOperations = _extractFiles.clone),
+                    (files = _extractFiles.files);

-                if (files.size) {
-                  formData = new FormData();
-                  formData.append('operations', JSON.stringify(extractedOperations));
-                  pathMap = {};
-                  i = 0;
-                  files.forEach(function (paths) {
-                    pathMap[++i] = paths;
-                  });
-                  formData.append('map', JSON.stringify(pathMap));
-                  i = 0;
-                  files.forEach(function (paths, file) {
-                    formData.append(++i, file, file.name);
-                  });
-                  req.fetchOpts.method = 'POST';
-                  req.fetchOpts.body = formData;
-                  delete req.fetchOpts.headers['Content-Type'];
-                }
+                  if (files.size) {
+                    formData = new FormData();
+                    formData.append(
+                      'operations',
+                      JSON.stringify(extractedOperations)
+                    );
+                    pathMap = {};
+                    i = 0;
+                    files.forEach(function (paths) {
+                      pathMap[++i] = paths;
+                    });
+                    formData.append('map', JSON.stringify(pathMap));
+                    i = 0;
+                    files.forEach(function (paths, file) {
+                      formData.append(++i, file, file.name);
+                    });
+                    req.fetchOpts.method = 'POST';
+                    req.fetchOpts.body = formData;
+                    delete req.fetchOpts.headers['Content-Type'];
+                  }

-                _context.next = 7;
-                return next(req);
+                  _context.next = 7;
+                  return next(req);

-              case 7:
-                res = _context.sent;
-                return _context.abrupt("return", res);
+                case 7:
+                  res = _context.sent;
+                  return _context.abrupt('return', res);

-              case 9:
-              case "end":
-                return _context.stop();
+                case 9:
+                case 'end':
+                  return _context.stop();
+              }
             }
-          }
-        }, _callee);
-      }));
+          }, _callee);
+        })
+      );

       return function (_x) {
         return _ref.apply(this, arguments);
       };
-    }();
+    })();
   };
 }
diff --git a/node_modules/react-relay-network-modern/node8/middlewares/upload.js b/node_modules/react-relay-network-modern/node8/middlewares/upload.js
index 73aefa7..5c0084d 100644
--- a/node_modules/react-relay-network-modern/node8/middlewares/upload.js
+++ b/node_modules/react-relay-network-modern/node8/middlewares/upload.js
@@ -1,37 +1,39 @@
-"use strict";
+'use strict';

-Object.defineProperty(exports, "__esModule", {
-  value: true
+Object.defineProperty(exports, '__esModule', {
+  value: true,
 });
 exports.default = uploadMiddleware;

-var _extractFiles = require("extract-files");
+var _extractFiles = require('extract-files');

-var _RelayRequestBatch = _interopRequireDefault(require("../RelayRequestBatch"));
+var _RelayRequestBatch = _interopRequireDefault(
+  require('../RelayRequestBatch')
+);

-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+function _interopRequireDefault(obj) {
+  return obj && obj.__esModule ? obj : { default: obj };
+}

 function uploadMiddleware() {
-  return next => async req => {
+  return (next) => async (req) => {
     if (req instanceof _RelayRequestBatch.default) {
       throw new Error('RelayRequestBatch is not supported');
     }

     const operations = {
-      query: req.operation.text,
-      variables: req.variables
+      id: req.operation.id,
+      variables: req.variables,
     };
-    const {
-      clone: extractedOperations,
-      files
-    } = (0, _extractFiles.extractFiles)(operations);
+    const { clone: extractedOperations, files } = (0,
+    _extractFiles.extractFiles)(operations);

     if (files.size) {
       const formData = new FormData();
       formData.append('operations', JSON.stringify(extractedOperations));
       const pathMap = {};
       let i = 0;
-      files.forEach(paths => {
+      files.forEach((paths) => {
         pathMap[++i] = paths;
       });
       formData.append('map', JSON.stringify(pathMap));
